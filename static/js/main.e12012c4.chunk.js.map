{"version":3,"sources":["components/Button.js","components/SideNav.js","components/Home.js","components/Contact.js","components/Experience.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Button","text","url","type","onClick","className","to","SideNav","visible","updateDrawer","screenWidth","window","screen","width","updateDrwr","src","logo","alt","Home","notFull","App","useState","drawer","setDrawer","exact","path","Contact","Experience","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"2YAceA,MAVf,YAA6C,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,IAAKC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,QAC9B,OACI,oCACG,kBAAC,IAAD,CAAMC,UAAS,cAASF,GAAQG,GAAIJ,EAAKE,QAASA,GAC5CH,KCHF,SAASM,EAAT,GAA2C,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,aAClCC,EAAcC,OAAOC,OAAOC,MAC1BC,EAAa,WACZJ,EAAY,KACXD,GAAcD,IAGtB,OACI,yBAAKH,UAAWG,EAAU,2BAA6B,qBACnD,yBAAKH,UAAU,0BACX,yBAAKA,UAAU,aAAaU,IAAKC,IAAMC,IAAI,UAG/C,yBAAKZ,UAAU,yBACX,kBAAC,EAAD,CAAQJ,KAAK,OAAOC,IAAI,IAAIC,KAAK,UAAUC,QAASU,IACpD,kBAAC,EAAD,CAAQb,KAAK,aAAaC,IAAI,cAAcC,KAAK,UAAWC,QAASU,IACrE,kBAAC,EAAD,CAAQb,KAAK,UAAUC,IAAI,WAAWC,KAAK,UAAWC,QAASU,KAEnE,yBAAKT,UAAU,UAAf,c,YCDGa,MAjBf,YAA0B,IAAXC,EAAU,EAAVA,QACX,OACI,6BAASd,UAAWc,EAAU,eAAiB,qBAC3C,yBAAKd,UAAU,QACX,yBAAKA,UAAU,SAAf,YAAgC,kDAChC,uBAAGA,UAAU,UAAb,wbCQDa,MAbf,YAA0B,IAAXC,EAAU,EAAVA,QACX,OACI,6BAASd,UAAWc,EAAU,eAAiB,qBAC3C,yBAAKd,UAAU,QACX,yBAAKA,UAAU,SAAf,OAA2B,2CAC3B,uBAAGA,UAAU,UAAb,yCCQDa,MAbf,YAA0B,IAAXC,EAAU,EAAVA,QACX,OACI,6BAASd,UAAWc,EAAU,eAAiB,qBAC3C,yBAAKd,UAAU,QACX,yBAAKA,UAAU,SAAf,OAA2B,2CAC3B,uBAAGA,UAAU,UAAb,4C,uBCmCDe,MAnCf,WAAgB,IAAD,EACeC,oBAAS,GADxB,mBACNC,EADM,KACEC,EADF,KAEPd,EAAe,kBAAMc,GAAWD,IACtC,OACE,oCACE,yBAAKjB,UAAU,UACb,yBAAKA,UAAU,aACXiB,GAAU,kBAAC,IAAD,CAAiBlB,QAASK,IACrCa,GAAU,kBAAC,IAAD,CAAgBlB,QAASK,KAEtC,yBAAKJ,UAAU,YACZiB,GAAU,kBAAC,IAAD,CAAiBlB,QAASK,KACnCa,GAAU,kBAAC,IAAD,CAAgBlB,QAASK,MAGzC,yBAAKJ,UAAU,OACb,kBAAC,IAAD,KACE,kBAACE,EAAD,CAASC,QAASc,EAAQb,aAAcA,IACxC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,CAAMN,QAASG,KAEjB,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,YAChB,kBAACC,EAAD,CAASP,QAASG,KAEpB,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,eAChB,kBAACE,EAAD,CAAYR,QAASG,UCxBfM,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.e12012c4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './../assets/css/button.css';\r\nimport { BrowserRouter as Router, Link } from 'react-router-dom';\r\n\r\nfunction Button({text, url, type, onClick}) {\r\n    return (\r\n        <>\r\n           <Link className={`btn ${type}`} to={url} onClick={onClick}>\r\n                {text}\r\n            </Link>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Button\r\n","import React from 'react'\r\nimport './../assets/css/sidenav.css'\r\nimport logo from './../logo.svg';\r\nimport Button from './Button';\r\n\r\nexport default function SideNav({visible, updateDrawer}) {\r\n    let screenWidth = window.screen.width;\r\n    const updateDrwr = () =>{\r\n        if(screenWidth<700){\r\n            updateDrawer(!visible);\r\n        }\r\n    }\r\n    return (\r\n        <nav className={visible ? \"side-nav active sbg-dark\" : \"side-nav sbg-dark\"}>\r\n            <div className=\"nav-image side-nav-top\">\r\n                <img className=\"img-circle\" src={logo} alt=\"Logo\"/>\r\n            </div>\r\n            \r\n            <div className=\"nav-list side-nav-top\">\r\n                <Button text=\"Home\" url=\"/\" type=\"btn-one\" onClick={updateDrwr}/>\r\n                <Button text=\"Experience\" url=\"/experience\" type=\"btn-one\"  onClick={updateDrwr}/>\r\n                <Button text=\"Contact\" url=\"/contact\" type=\"btn-one\"  onClick={updateDrwr}/>\r\n            </div>\r\n            <div className=\"footer\">2020 &copy;</div>\r\n        </nav>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport logo from './../logo.svg';\r\nimport './../assets/css/style.css';\r\nimport './../assets/css/colors.css';\r\n\r\nfunction Home({notFull}) {\r\n    return (\r\n        <section className={notFull ? \"page bg-dark\" : \"page full bg-dark\"}>\r\n            <div className=\"home\">\r\n                <div className=\"intro\">Hi, I am <span>Ebuka Maduekwe.</span></div>\r\n                <p className=\"page-p\">\r\n                    I am a focused and innovative software engineer who always tries to achieve excellence even in\r\n                    conflicting priorities, while at the same time making sure the team attains excellence as well, because a\r\n                    team is as strong as its weakest link. I equally attempt new experiences courageously and make sure I\r\n                    respect the people I work with, the environment I work in and exhibit a great understanding and respect\r\n                    of individual differences.\r\n                </p>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react';\r\nimport logo from './../logo.svg';\r\nimport './../assets/css/style.css';\r\nimport './../assets/css/colors.css';\r\n\r\nfunction Home({notFull}) {\r\n    return (\r\n        <section className={notFull ? \"page bg-dark\" : \"page full bg-dark\"}>\r\n            <div className=\"home\">\r\n                <div className=\"intro\">Hi. <span>Hold on!</span></div>\r\n                <p className=\"page-p\">\r\n                    The Contact page is in development\r\n                </p>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react';\r\nimport logo from './../logo.svg';\r\nimport './../assets/css/style.css';\r\nimport './../assets/css/colors.css';\r\n\r\nfunction Home({notFull}) {\r\n    return (\r\n        <section className={notFull ? \"page bg-dark\" : \"page full bg-dark\"}>\r\n            <div className=\"home\">\r\n                <div className=\"intro\">Hi. <span>Hold on!</span></div>\r\n                <p className=\"page-p\">\r\n                    The experience page is in development\r\n                </p>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React, { useState} from 'react';\nimport './App.css';\nimport SideNav from './components/SideNav';\nimport Home from './components/Home';\nimport Contact from './components/Contact';\nimport Experience from './components/Experience';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport * as FaIcons from \"react-icons/fa\";\nimport * as CgIcons from \"react-icons/cg\";\n\nfunction App() {\n  const [drawer, setDrawer] = useState(true)\n  const updateDrawer = () => setDrawer(!drawer)\n  return (\n    <>\n      <div className=\"drawer\">\n        <div className=\"m-drawer\">\n          {!drawer && <CgIcons.CgClose onClick={updateDrawer}/>}\n          {drawer && <FaIcons.FaBars onClick={updateDrawer}/> }\n        </div>\n        <div className=\"l-drawer\">\n          {drawer && <CgIcons.CgClose onClick={updateDrawer}/>}\n          {!drawer && <FaIcons.FaBars onClick={updateDrawer}/> }\n        </div>\n      </div>\n      <div className=\"App\">\n        <Router>\n          <SideNav visible={drawer} updateDrawer={updateDrawer}/>\n          <Switch>\n            <Route exact path=\"/\">\n              <Home notFull={drawer}/>\n            </Route>\n            <Route exact path=\"/contact\">\n              <Contact notFull={drawer}/>\n            </Route>\n            <Route exact path=\"/experience\">\n              <Experience notFull={drawer}/>\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}